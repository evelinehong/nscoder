{"DSL": {"logVariable": 0.0, "productions": [{"expression": "empty", "logProbability": 0.0}, {"expression": "cons", "logProbability": 0.0}, {"expression": "car", "logProbability": 0.0}, {"expression": "cdr", "logProbability": 0.0}, {"expression": "empty?", "logProbability": 0.0}, {"expression": "fix1", "logProbability": 0.0}, {"expression": "if", "logProbability": 0.0}, {"expression": "eq?", "logProbability": 0.0}, {"expression": "succ", "logProbability": 0.0}, {"expression": "desc", "logProbability": 0.0}, {"expression": "0", "logProbability": 0.0}, {"expression": "1", "logProbability": 0.0}]}, "tasks": [{"examples": [{"inputs": [[8, 4], [7, 0]], "output": [15, 4]}, {"inputs": [[7, 6], [6, 1]], "output": [13, 7]}, {"inputs": [[7, 1, 1], [5, 9, 2]], "output": [12, 10, 3]}, {"inputs": [[2, 4], [9, 9]], "output": [11, 13]}, {"inputs": [[5, 6, 9, 8], [4, 7, 8, 9]], "output": [9, 13, 17, 17]}, {"inputs": [[1, 1, 8], [3, 6, 7]], "output": [4, 7, 15]}, {"inputs": [[6, 5], [7, 6]], "output": [13, 11]}, {"inputs": [[1, 5, 6], [5, 4, 5]], "output": [6, 9, 11]}, {"inputs": [[7, 1], [1, 1]], "output": [8, 2]}, {"inputs": [[6, 1], [5, 2]], "output": [11, 3]}], "name": "zip plus", "request": {"constructor": "->", "arguments": [{"constructor": "list", "arguments": [{"constructor": "int", "arguments": []}]}, {"constructor": "->", "arguments": [{"constructor": "list", "arguments": [{"constructor": "int", "arguments": []}]}, {"constructor": "list", "arguments": [{"constructor": "int", "arguments": []}]}]}]}, "maximumFrontier": 10}, {"examples": [{"inputs": [[0, 9, 8, 8], [5, 1, 6, 5]], "output": [-5, 8, 2, 3]}, {"inputs": [[6, 0, 4, 9], [4, 5, 1, 9]], "output": [2, -5, 3, 0]}, {"inputs": [[3, 2, 7, 3], [1, 5, 8, 5]], "output": [2, -3, -1, -2]}, {"inputs": [[4, 9], [3, 6]], "output": [1, 3]}, {"inputs": [[9, 9, 8, 0], [9, 4, 0, 2]], "output": [0, 5, 8, -2]}, {"inputs": [[4, 5, 5], [0, 2, 2]], "output": [4, 3, 3]}, {"inputs": [[6, 1, 2, 0], [1, 8, 3, 6]], "output": [5, -7, -1, -6]}, {"inputs": [[7, 5, 2], [5, 4, 5]], "output": [2, 1, -3]}, {"inputs": [[9, 1, 0, 2], [2, 9, 0, 1]], "output": [7, -8, 0, 1]}, {"inputs": [[7, 6, 7], [9, 7, 6]], "output": [-2, -1, 1]}], "name": "zip minus", "request": {"constructor": "->", "arguments": [{"constructor": "list", "arguments": [{"constructor": "int", "arguments": []}]}, {"constructor": "->", "arguments": [{"constructor": "list", "arguments": [{"constructor": "int", "arguments": []}]}, {"constructor": "list", "arguments": [{"constructor": "int", "arguments": []}]}]}]}, "maximumFrontier": 10}], "programTimeout": 0.0005, "nc": 1, "timeout": 10.0, "lowerBound": 0.0, "upperBound": 1.5, "budgetIncrement": 1.5, "verbose": false, "shatter": 10} {"inputs": [2], "output": [0, 1, 2]}, {"inputs": [3], "output": [0, 1, 2, 3]}, {"inputs": [4], "output": [0, 1, 2, 3, 4]}, {"inputs": [5], "output": [0, 1, 2, 3, 4, 5]}, {"inputs": [6], "output": [0, 1, 2, 3, 4, 5, 6]}, {"inputs": [7], "output": [0, 1, 2, 3, 4, 5, 6, 7]}, {"inputs": [8], "output": [0, 1, 2, 3, 4, 5, 6, 7, 8]}, {"inputs": [9], "output": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]}], "name": "range inclusive", "request": {"constructor": "->", "arguments": [{"constructor": "int", "arguments": []}, {"constructor": "list", "arguments": [{"constructor": "int", "arguments": []}]}]}, "maximumFrontier": 10}], "programTimeout": 0.0005, "nc": 1, "timeout": 10.0, "lowerBound": 0.0, "upperBound": 1.5, "budgetIncrement": 1.5, "verbose": false, "shatter": 10}: "->", "arguments": [{"constructor": "list", "arguments": [{"constructor": "int", "arguments": []}]}, {"constructor": "list", "arguments": [{"constructor": "int", "arguments": []}]}]}, "maximumFrontier": 10}, {"examples": [{"inputs": [[1, 8, 6, 9]], "output": [1, 1, 8, 8, 6, 6, 9, 9]}, {"inputs": [[9, 3, 8, 6, 7, 7]], "output": [9, 9, 3, 3, 8, 8, 6, 6, 7, 7, 7, 7]}, {"inputs": [[9, 6, 4, 9, 9]], "output": [9, 9, 6, 6, 4, 4, 9, 9, 9, 9]}, {"inputs": [[9, 1, 3, 3]], "output": [9, 9, 1, 1, 3, 3, 3, 3]}, {"inputs": [[1, 2, 3, 2, 8]], "output": [1, 1, 2, 2, 3, 3, 2, 2, 8, 8]}, {"inputs": [[2, 0, 6, 7]], "output": [2, 2, 0, 0, 6, 6, 7, 7]}, {"inputs": [[9, 7, 4, 0, 3, 4]], "output": [9, 9, 7, 7, 4, 4, 0, 0, 3, 3, 4, 4]}, {"inputs": [[4, 7, 1, 3, 4, 9]], "output": [4, 4, 7, 7, 1, 1, 3, 3, 4, 4, 9, 9]}, {"inputs": [[3, 6, 1, 8, 3, 2]], "output": [3, 3, 6, 6, 1, 1, 8, 8, 3, 3, 2, 2]}, {"inputs": [[2, 1, 0, 2, 4]], "output": [2, 2, 1, 1, 0, 0, 2, 2, 4, 4]}], "name": "stutter", "request": {"constructor": "->", "arguments": [{"constructor": "list", "arguments": [{"constructor": "int", "arguments": []}]}, {"constructor": "list", "arguments": [{"constructor": "int", "arguments": []}]}]}, "maximumFrontier": 10}, {"examples": [{"inputs": [[8, 0, 8, 7, 6]], "output": [8, 0, 8, 7, 6, 0]}, {"inputs": [[3, 8, 5, 9]], "output": [3, 8, 5, 9, 0]}, {"inputs": [[7, 0, 3, 4, 8]], "output": [7, 0, 3, 4, 8, 0]}, {"inputs": [[4, 7, 7, 1]], "output": [4, 7, 7, 1, 0]}, {"inputs": [[9, 3, 2, 4]], "output": [9, 3, 2, 4, 0]}, {"inputs": [[0, 8, 6, 1, 3, 1]], "output": [0, 8, 6, 1, 3, 1, 0]}, {"inputs": [[1, 2, 7, 4, 8]], "output": [1, 2, 7, 4, 8, 0]}, {"inputs": [[4, 6, 7, 7, 3, 7]], "output": [4, 6, 7, 7, 3, 7, 0]}, {"inputs": [[2, 6, 3, 9, 8, 2]], "output": [2, 6, 3, 9, 8, 2, 0]}, {"inputs": [[4, 6, 5, 8]], "output": [4, 6, 5, 8, 0]}], "name": "append constant 0", "request": {"constructor": "->", "arguments": [{"constructor": "list", "arguments": [{"constructor": "int", "arguments": []}]}, {"constructor": "list", "arguments": [{"constructor": "int", "arguments": []}]}]}, "maximumFrontier": 10}, {"examples": [{"inputs": [[0, 4, 4, 9, 9]], "output": [0, 8, 8, 18, 18]}, {"inputs": [[7, 2, 7, 8, 7, 5]], "output": [14, 4, 14, 16, 14, 10]}, {"inputs": [[8, 8, 6, 7, 5]], "output": [16, 16, 12, 14, 10]}, {"inputs": [[3, 9, 6, 3]], "output": [6, 18, 12, 6]}, {"inputs": [[0, 5, 7, 6, 6]], "output": [0, 10, 14, 12, 12]}, {"inputs": [[2, 7, 0, 2, 8, 9]], "output": [4, 14, 0, 4, 16, 18]}, {"inputs": [[1, 7, 1, 8, 7]], "output": [2, 14, 2, 16, 14]}, {"inputs": [[2, 6, 2, 1]], "output": [4, 12, 4, 2]}, {"inputs": [[4, 5, 9, 6, 1]], "output": [8, 10, 18, 12, 2]}, {"inputs": [[8, 6, 5, 7, 8]], "output": [16, 12, 10, 14, 16]}], "name": "map double", "request": {"constructor": "->", "arguments": [{"constructor": "list", "arguments": [{"constructor": "int", "arguments": []}]}, {"constructor": "list", "arguments": [{"constructor": "int", "arguments": []}]}]}, "maximumFrontier": 10}, {"examples": [{"inputs": [[9, 1, 3, 4]], "output": [10, 2, 4, 5]}, {"inputs": [[1, 6, 1, 1]], "output": [2, 7, 2, 2]}, {"inputs": [[2, 4, 0, 0, 5]], "output": [3, 5, 1, 1, 6]}, {"inputs": [[4, 5, 5, 6]], "output": [5, 6, 6, 7]}, {"inputs": [[3, 8, 6, 9]], "output": [4, 9, 7, 10]}, {"inputs": [[2, 2, 2, 1, 9, 6]], "output": [3, 3, 3, 2, 10, 7]}, {"inputs": [[3, 7, 9, 2, 3, 7]], "output": [4, 8, 10, 3, 4, 8]}, {"inputs": [[4, 7, 4, 0, 7, 4]], "output": [5, 8, 5, 1, 8, 5]}, {"inputs": [[8, 2, 1, 7, 5, 9]], "output": [9, 3, 2, 8, 6, 10]}, {"inputs": [[6, 4, 7, 4, 3]], "output": [7, 5, 8, 5, 4]}], "name": "map increment", "request": {"constructor": "->", "arguments": [{"constructor": "list", "arguments": [{"constructor": "int", "arguments": []}]}, {"constructor": "list", "arguments": [{"constructor": "int", "arguments": []}]}]}, "maximumFrontier": 10}, {"examples": [{"inputs": [[7, 1, 3, 6, 9]], "output": [-7, -1, -3, -6, -9]}, {"inputs": [[9, 4, 4, 0, 6]], "output": [-9, -4, -4, 0, -6]}, {"inputs": [[0, 9, 0, 9, 7]], "output": [0, -9, 0, -9, -7]}, {"inputs": [[3, 9, 5, 3, 3]], "output": [-3, -9, -5, -3, -3]}, {"inputs": [[4, 2, 1, 0, 4, 7]], "output": [-4, -2, -1, 0, -4, -7]}, {"inputs": [[9, 5, 2, 1]], "output": [-9, -5, -2, -1]}, {"inputs": [[5, 6, 2, 3, 2]], "output": [-5, -6, -2, -3, -2]}, {"inputs": [[5, 8, 8, 4, 2, 4]], "output": [-5, -8, -8, -4, -2, -4]}, {"inputs": [[4, 5, 1, 7, 1]], "output": [-4, -5, -1, -7, -1]}, {"inputs": [[3, 6, 8, 5]], "output": [-3, -6, -8, -5]}], "name": "map negation", "request": {"constructor": "->", "arguments": [{"constructor": "list", "arguments": [{"constructor": "int", "arguments": []}]}, {"constructor": "list", "arguments": [{"constructor": "int", "arguments": []}]}]}, "maximumFrontier": 10}], "programTimeout": 0.0005, "nc": 1, "timeout": 10.0, "lowerBound": 0.0, "upperBound": 1.5, "budgetIncrement": 1.5, "verbose": false, "shatter": 10}